#pragma once
#include "Globals.h"

namespace global
{
	GLFWwindow* window;
	ISoundEngine *SoundEngine;
	ISound *candylandSong;

	std::unique_ptr<Camera> camera;

	std::unique_ptr<DirectionalLight> directionalLight;
	std::unique_ptr<SpotLight> spotLights[4];

	GLuint screenQuadVAO;

	std::atomic<bool> windowShouldClose;

	std::atomic<double> deltaTimeRenderEngine;
	std::atomic<double> deltaTimeLogicEngine;
	std::atomic<double> currentFrameLogicEngine;
	std::atomic<double> t;

	std::mutex particleSystemsToAddMutex;
	std::vector<particleSystem> particleSystemsToAdd;

	float currentTransitionGrayness;
}

namespace breakout
{
	std::array<std::array<std::array<std::atomic<bool>, breakout::BREAKOUT_SIZE>, breakout::BREAKOUT_SIZE>, breakout::BREAKOUT_SIZE> breakout::bricksBool{ {
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
		{{
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,1,1,1,1,1,1,1,1,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,0,0,0,1,1,0,0,0,1}},
			{{1,1,1,1,1,1,1,1,1,1}}
		}},
	} };

	std::atomic<bool> updateBricks;
	std::mutex bricksToRemoveMutex;
	std::vector<glm::vec3> bricksToRemove;

	std::mutex bricksPositionMutex;
	std::vector<glm::vec3> bricksPosition;

	std::atomic<glm::vec3> ballPosition, padPosition;

	std::mutex hitQueuesMutex;
	iterable_queue<glm::vec3> hitQueues[5];
}

namespace setting
{
	unsigned int SCREEN_WIDTH;
	unsigned int SCREEN_HEIGHT;

	bool FULLSCREEN;
	bool CONSOLE;
	bool MUSIC;

	std::string CAMERA_MODE;

	std::string TITLE;
}